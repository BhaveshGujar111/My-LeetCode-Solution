--------------
|  Question  |
--------------

    Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

    Example 1:
    Input: nums = [-4,-1,0,3,10]
    Output: [0,1,9,16,100]
    Explanation: After squaring, the array becomes [16,1,0,9,100].
    After sorting, it becomes [0,1,9,16,100].

    Example 2:
    Input: nums = [-7,-3,2,3,11]
    Output: [4,9,9,49,121]

    Constraints:
    1 <= nums.length <= 104
    -104 <= nums[i] <= 104
    nums is sorted in non-decreasing order.

--------------
|  Solution  |
--------------

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> res;
        int position=-1;
        for(int i=0;i<nums.size();i++){
            if(i+1<nums.size() && nums[i]<0 && nums[i+1]>=0){
                position=i;
                break;
            }
        }
        if(position == -1){
            for(int i=0;i<nums.size();i++){
                nums[i]*=nums[i];
            }
            return nums;
        }else{
            for(int i=0;i<nums.size();i++){
                nums[i]*=nums[i];
            }
            left=position;right=position+1;
            
            while(left-1 || right==nums.size()){
                
                if(nums[left] > nums[right]){
                    res.push_back(nums[right]);
                    right++;
                }else{
                    res.push_back(nums[left]);
                    left--;
                }   
            }

        }
        return res;
    }
};
