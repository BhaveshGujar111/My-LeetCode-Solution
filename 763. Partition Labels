--------------
|  Question  |
--------------

      You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.
      Return a list of integers representing the size of these parts.

      Example 1:
      Input: s = "ababcbacadefegdehijhklij"
      Output: [9,7,8]
      Explanation:
      The partition is "ababcbaca", "defegde", "hijhklij".
      This is a partition so that each letter appears in at most one part.
      A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.

      Example 2:
      Input: s = "eccbbbbdec"
      Output: [10]

      Constraints:
      1 <= s.length <= 500
      s consists of lowercase English letters.

--------------
|  Solution  |
--------------

class Solution {
public:
    vector<int> partitionLabels(string s) {
        map<char,pair<int,int>> mp;
        for(int i = 0; i < s.length(); i++) {
            if(mp.find(s[i]) == mp.end()){
                mp[s[i]].first = i;    
                mp[s[i]].second = i;
            }else{
                mp[s[i]].second = i;
            }
        }
        int mx = mp[s[0]].second;
        vector<int> ans;
        for(int i = 0; i < s.length(); i++) {
            if(mx == -1){
                mx = mp[s[i]].second;
            }else{
                mx = max(mp[s[i]].second, mx);
            }
            if(i == mx){
                mx = -1;
                ans.push_back(i+1);
            }
        }
        if(mx != -1) ans.push_back(s.length());
        for(int i = ans.size()-1; i > 0; i--){
            ans[i] -= ans[i-1];
        }
        return ans;
    }
};
